// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Request, Response, NextFunction } from "express";
import jwt from "jsonwebtoken";
import User from "../models/user";

interface JwtPayload {
  id: number;
}

export const protect = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  let token;
  if (req.cookies.token) {
    token = req.cookies.token;
  }

  if (!token) {
    res.status(401).json({ success: false, error: "Not authorized" });
    return;
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JwtPayload;

    // Check if session exists
    if (!req.session.userId || req.session.userId !== decoded.id) {
      res.status(401).json({ success: false, error: "Not authorized" });
      return;
    }

    req.user = await User.findByPk(decoded.id);
    next();
  } catch (error) {
    res.status(401).json({ success: false, error: "Not authorized" });
  }
};
