// Code Generated by Sidekick is for learning and experimentation purposes only.
import { Request, Response } from "express";
import Task, { TaskStatus, TaskPriority } from "../models/task";
import Comment from "../models/comment";

export const createTask = async (req: Request, res: Response) => {
  try {
    const { title, description, status, startDate, endDate, priority } =
      req.body;

    // Validate status and priority
    if (!Object.values(TaskStatus).includes(status)) {
      return res.status(400).json({ error: "Invalid status value" });
    }
    if (!Object.values(TaskPriority).includes(priority)) {
      return res.status(400).json({ error: "Invalid priority value" });
    }

    const task = await Task.create({
      title,
      description,
      status,
      startDate,
      endDate,
      priority,
    });
    res.status(201).json(task);
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

export const getAllTasks = async (req: Request, res: Response) => {
  try {
    const tasks = await Task.findAll({ include: [Comment] });
    res.status(200).json(tasks);
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

export const getTaskById = async (req: Request, res: Response) => {
  try {
    const task = await Task.findByPk(req.params.id, { include: [Comment] });
    if (task) {
      res.status(200).json(task);
    } else {
      res.status(404).json({ error: "Task not found" });
    }
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

export const updateTask = async (req: Request, res: Response) => {
  try {
    const { title, description, status, startDate, endDate, priority } =
      req.body;

    // Validate status and priority
    if (status && !Object.values(TaskStatus).includes(status)) {
      return res.status(400).json({ error: "Invalid status value" });
    }
    if (priority && !Object.values(TaskPriority).includes(priority)) {
      return res.status(400).json({ error: "Invalid priority value" });
    }

    const [updated] = await Task.update(
      { title, description, status, startDate, endDate, priority },
      {
        where: { id: req.params.id },
      }
    );
    if (updated) {
      const updatedTask = await Task.findByPk(req.params.id);
      res.status(200).json(updatedTask);
    } else {
      res.status(404).json({ error: "Task not found" });
    }
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};

export const deleteTask = async (req: Request, res: Response) => {
  try {
    const deleted = await Task.destroy({
      where: { id: req.params.id },
    });
    if (deleted) {
      res.status(204).send();
    } else {
      res.status(404).json({ error: "Task not found" });
    }
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
};
