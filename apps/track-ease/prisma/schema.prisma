// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Task {
  id           Int      @id @default(autoincrement())
  title        String
  description  String
  status       String
  priority     String
  issueType    String
  label        String
  storyPoints  Int
  startDate    String
  endDate      String
  Project      Project? @relation(fields: [projectId], references: [id])
  projectId    String?
  assignee     User     @relation(fields: [userId], references: [id])
  userId       String
  parentTaskId Int?     @unique
  parentTask   Task?    @relation("parentTask", fields: [parentTaskId], references: [id])
  Epic         Epic?    @relation(fields: [epicId], references: [id])
  epicId       String?
  Task         Task[]   @relation("parentTask")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  ProjectOnUsers ProjectOnUsers[]
  tasks          Task[]
  projectId      String?
  role           String           @default("USER")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id              String            @id @default(cuid())
  name            String
  description     String
  startDate       DateTime
  endDate         DateTime
  ProjectOnUsers  ProjectOnUsers[]
  tasks           Task[]
  releases        Release[]
  releaseDrafts   ReleaseDraft[]
  initiations     Initiation[]
  InitiationDraft InitiationDraft[]
  Epic            Epic[]
  EpicDraft       EpicDraft[]
}

model Initiation {
  id                    String                 @id @default(cuid())
  name                  String
  description           String
  highLevelRequirements HighLevelRequirement[]
  Project               Project?               @relation(fields: [projectId], references: [id])
  projectId             String?
  mapped                Boolean                @default(false)
  EpicDraft             EpicDraft[]
}

model InitiationDraft {
  id                    String                      @id @default(cuid())
  name                  String?
  description           String?
  highLevelRequirements HighLevelRequirementDraft[]
  Project               Project?                    @relation(fields: [projectId], references: [id])
  projectId             String?
}

model HighLevelRequirement {
  id           String      @id @default(cuid())
  requirement  String
  priority     Int
  Initiation   Initiation? @relation(fields: [initiationId], references: [id])
  initiationId String?
  Epic         Epic?       @relation(fields: [epicId], references: [id])
  epicId       String?
  EpicDraft    EpicDraft?  @relation(fields: [epicDraftId], references: [id])
  epicDraftId  String?
  mapped       Boolean     @default(false)
}

model HighLevelRequirementDraft {
  id                String           @id @default(cuid())
  requirement       String?
  priority          Int?
  InitiationDraft   InitiationDraft? @relation(fields: [initiationDraftId], references: [id])
  initiationDraftId String?
}

model ReleaseDraft {
  id          String   @id @default(cuid())
  name        String?
  description String?
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Release {
  id          String   @id @default(cuid())
  name        String
  description String
  Project     Project? @relation(fields: [projectId], references: [id])
  projectId   String?
}

model Epic {
  id                    String                 @id @default(cuid())
  title                 String
  description           String
  highLevelRequirements HighLevelRequirement[]
  document              String
  tasks                 Task[]
  project               Project                @relation(fields: [projectId], references: [id])
  projectId             String
}

model EpicDraft {
  id                    String                 @id @default(cuid())
  title                 String?
  description           String?
  highLevelRequirements HighLevelRequirement[]
  document              String?
  project               Project?               @relation(fields: [projectId], references: [id])
  projectId             String?
  fromInitiation        Initiation?            @relation(fields: [initiationId], references: [id])
  initiationId          String?
}

model ProjectOnUsers {
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  assignedAt DateTime @default(now())
  assignedBy String
  role       String   @default("MEMBER")

  @@id([projectId, userId])
}

// enum ProjectRole {
//   MEMBER @map("MEMBER")
//   OWNER  @map("OWNER")
// }

// enum PlatformRole {
//   USER
//   ADMIN
// }
